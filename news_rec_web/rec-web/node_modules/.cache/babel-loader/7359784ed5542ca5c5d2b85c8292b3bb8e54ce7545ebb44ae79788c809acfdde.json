{"ast":null,"code":"// 导入VueRoute路由组件\nimport VueRouter from 'vue-router';\n//导入cookie\nimport cookie from './assets/js/cookie';\nimport signIn from './components/signIn.vue';\nlet routerObj = new VueRouter({\n  routes: [{\n    path: '/',\n    component: signIn,\n    // 同步加载组件，加载完成后进入首页\n    name: 'signIn',\n    meta: {\n      keepAlive: false\n    }\n  }, {\n    path: '/signUp',\n    component: () => import('./components/signUp.vue'),\n    //异步加载组件，进入组件时再加载提高进入首页时的加载速度\n    name: 'signUp',\n    meta: {\n      keepAlive: false\n    }\n  }, {\n    path: '/recLists',\n    component: () => import('./components/recLists.vue'),\n    name: 'recLists',\n    meta: {\n      keepAlive: true\n    }\n  }, {\n    path: '/hotLists',\n    component: () => import('./components/hotLists.vue'),\n    name: 'hotLists',\n    meta: {\n      keepAlive: true\n    }\n  }, {\n    path: '/Myself',\n    component: () => import('./components/Myself.vue'),\n    name: 'Myself',\n    meta: {\n      keepAlive: false\n    }\n  }, {\n    path: '/NewsInfo/:id',\n    name: 'NewsInfo',\n    component: () => import('./components/NewsInfo.vue'),\n    meta: {\n      keepAlive: false\n    }\n  }],\n  linkActiveClass: 'mui-active'\n});\n\n// 解决跳转相同路由时会报错的问题\nconst originalPush = VueRouter.prototype.push;\nVueRouter.prototype.push = function push(location) {\n  return originalPush.call(this, location).catch(err => err);\n};\n\n/*\r\n* beforeEach:从一个页面跳转到另外一个页面时触发\r\n* to:要跳转的页面\r\n* from:从哪个页面出来\r\n* next:决定是否通过\r\n*/\n\n/* 设置了一个全局守卫，只要发生页面跳转，会执行里面的代码，\r\n调用cookie.getCookie()方法读取用户信息，\r\n如果不存在代表没有登录，用next('/')进入登录页面进行登录，\r\n如果读取到了用户信息，不做拦截直接放行。 */\n\nrouterObj.beforeEach((to, from, next) => {\n  if (cookie.getCookie(\"openId\")) {\n    next();\n  } else {\n    if (to.path == \"/\") {\n      next();\n    }\n    if (to.path == '/signUp') {\n      next();\n    } else {\n      next('/');\n    }\n  }\n});\nexport default routerObj;","map":{"version":3,"names":["VueRouter","cookie","signIn","routerObj","routes","path","component","name","meta","keepAlive","linkActiveClass","originalPush","prototype","push","location","call","catch","err","beforeEach","to","from","next","getCookie"],"sources":["/home/harry/fun-rec/codes/news_recsys/news_rec_web/rec-web/src/router.js"],"sourcesContent":["// 导入VueRoute路由组件\r\nimport VueRouter from 'vue-router'\r\n//导入cookie\r\nimport cookie from './assets/js/cookie'\r\n\r\nimport signIn from './components/signIn.vue'\r\n\r\nlet routerObj = new VueRouter({\r\n    routes: [\r\n        {\r\n            path: '/',\r\n            component: signIn,  // 同步加载组件，加载完成后进入首页\r\n            name: 'signIn',\r\n            meta: {\r\n                keepAlive: false,\r\n            },\r\n\r\n        },\r\n        {\r\n            path: '/signUp',\r\n            component: () => import('./components/signUp.vue'),  //异步加载组件，进入组件时再加载提高进入首页时的加载速度\r\n            name: 'signUp',\r\n            meta: {\r\n                keepAlive: false,\r\n            },\r\n\r\n        },\r\n        {\r\n            path: '/recLists',\r\n            component: () => import('./components/recLists.vue'),\r\n            name: 'recLists',\r\n            meta: {\r\n                keepAlive: true,\r\n            }\r\n        },\r\n        {\r\n            path: '/hotLists',\r\n            component: () => import('./components/hotLists.vue'),\r\n            name: 'hotLists',\r\n            meta: {\r\n                keepAlive: true,\r\n            }\r\n        },\r\n        {\r\n            path: '/Myself',\r\n            component: () => import('./components/Myself.vue'),\r\n            name: 'Myself',\r\n            meta: {\r\n                keepAlive: false,\r\n            },\r\n\r\n        },\r\n        {\r\n            path: '/NewsInfo/:id',\r\n            name: 'NewsInfo',\r\n            component: () => import('./components/NewsInfo.vue'),\r\n            meta: {\r\n                keepAlive: false,\r\n            }\r\n        },\r\n    ],\r\n    linkActiveClass: 'mui-active',\r\n})\r\n\r\n// 解决跳转相同路由时会报错的问题\r\nconst originalPush = VueRouter.prototype.push\r\nVueRouter.prototype.push = function push(location) {\r\n    return originalPush.call(this, location).catch(err => err)\r\n}\r\n\r\n/*\r\n* beforeEach:从一个页面跳转到另外一个页面时触发\r\n* to:要跳转的页面\r\n* from:从哪个页面出来\r\n* next:决定是否通过\r\n*/\r\n\r\n/* 设置了一个全局守卫，只要发生页面跳转，会执行里面的代码，\r\n调用cookie.getCookie()方法读取用户信息，\r\n如果不存在代表没有登录，用next('/')进入登录页面进行登录，\r\n如果读取到了用户信息，不做拦截直接放行。 */\r\n\r\nrouterObj.beforeEach((to, from, next) => {\r\n    if (cookie.getCookie(\"openId\")) {\r\n        next()\r\n    } else {\r\n        if (to.path == \"/\") {\r\n            next()\r\n        } if (to.path == '/signUp') {\r\n            next()\r\n        } else {\r\n            next('/')\r\n        }\r\n    }\r\n})\r\nexport default routerObj"],"mappings":"AAAA;AACA,OAAOA,SAAS,MAAM,YAAY;AAClC;AACA,OAAOC,MAAM,MAAM,oBAAoB;AAEvC,OAAOC,MAAM,MAAM,yBAAyB;AAE5C,IAAIC,SAAS,GAAG,IAAIH,SAAS,CAAC;EAC1BI,MAAM,EAAE,CACJ;IACIC,IAAI,EAAE,GAAG;IACTC,SAAS,EAAEJ,MAAM;IAAG;IACpBK,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAE;MACFC,SAAS,EAAE;IACf;EAEJ,CAAC,EACD;IACIJ,IAAI,EAAE,SAAS;IACfC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,yBAAyB,CAAC;IAAG;IACrDC,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAE;MACFC,SAAS,EAAE;IACf;EAEJ,CAAC,EACD;IACIJ,IAAI,EAAE,WAAW;IACjBC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,2BAA2B,CAAC;IACpDC,IAAI,EAAE,UAAU;IAChBC,IAAI,EAAE;MACFC,SAAS,EAAE;IACf;EACJ,CAAC,EACD;IACIJ,IAAI,EAAE,WAAW;IACjBC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,2BAA2B,CAAC;IACpDC,IAAI,EAAE,UAAU;IAChBC,IAAI,EAAE;MACFC,SAAS,EAAE;IACf;EACJ,CAAC,EACD;IACIJ,IAAI,EAAE,SAAS;IACfC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,yBAAyB,CAAC;IAClDC,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAE;MACFC,SAAS,EAAE;IACf;EAEJ,CAAC,EACD;IACIJ,IAAI,EAAE,eAAe;IACrBE,IAAI,EAAE,UAAU;IAChBD,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,2BAA2B,CAAC;IACpDE,IAAI,EAAE;MACFC,SAAS,EAAE;IACf;EACJ,CAAC,CACJ;EACDC,eAAe,EAAE;AACrB,CAAC,CAAC;;AAEF;AACA,MAAMC,YAAY,GAAGX,SAAS,CAACY,SAAS,CAACC,IAAI;AAC7Cb,SAAS,CAACY,SAAS,CAACC,IAAI,GAAG,SAASA,IAAIA,CAACC,QAAQ,EAAE;EAC/C,OAAOH,YAAY,CAACI,IAAI,CAAC,IAAI,EAAED,QAAQ,CAAC,CAACE,KAAK,CAACC,GAAG,IAAIA,GAAG,CAAC;AAC9D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEAd,SAAS,CAACe,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACrC,IAAIpB,MAAM,CAACqB,SAAS,CAAC,QAAQ,CAAC,EAAE;IAC5BD,IAAI,CAAC,CAAC;EACV,CAAC,MAAM;IACH,IAAIF,EAAE,CAACd,IAAI,IAAI,GAAG,EAAE;MAChBgB,IAAI,CAAC,CAAC;IACV;IAAE,IAAIF,EAAE,CAACd,IAAI,IAAI,SAAS,EAAE;MACxBgB,IAAI,CAAC,CAAC;IACV,CAAC,MAAM;MACHA,IAAI,CAAC,GAAG,CAAC;IACb;EACJ;AACJ,CAAC,CAAC;AACF,eAAelB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}